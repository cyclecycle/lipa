clearing ports

> lipa@0.1.0 serve /home/nickm/Documents/dev/lipa/lipa-ui
> vue-cli-service serve

Listening on port: 8085
 INFO  Starting development server...
ant_cons_head_valence.db
 * Serving Flask app "api" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: on
 WARNING  Compiled with 1 warnings9:41:33 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_matches'
     |             ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:38:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_matches'
     |                                      ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:97:7:
   95 |     },
   96 |     loadMatches(page) {
>  97 |       console.log(page);
      |       ^
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:100:12:
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
> 100 |       if (!isNaN(this.patternId)) {
      |            ^
  101 |         query = query + `/?pattern_id=${this.patternId}`;
  102 |       }
  103 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:101:9:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:101:17:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |       }
  103 |       const targetAttribute = 'matches';
> 104 |       console.log('page:', page);
      |       ^
  105 |       const startRow = (page - 1) * this.matchesPerPage;
  106 |       const rowLimit = startRow + this.matchesPerPage;
  107 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:116:7:
  114 |         chunkSize,
  115 |       };
> 116 |       console.log(loadParams);
      |       ^
  117 |       database.loadByQueryIteratively(loadParams).then(() => {
  118 |         this.loading = false;
  119 |       });


10 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

  Note that the development build is not optimized.
  To create a production build, run npm run build.

 WAIT  Compiling...9:41:33 AM

 WARNING  Compiled with 1 warnings9:41:35 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_training_matches_view'
     |             ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:52:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_training_matches_view'
     |                                                    ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:97:7:
   95 |     },
   96 |     loadMatches(page) {
>  97 |       console.log(page);
      |       ^
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:100:12:
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
> 100 |       if (!isNaN(this.patternId)) {
      |            ^
  101 |         query = query + `/?pattern_id=${this.patternId}`;
  102 |       }
  103 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:101:9:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:101:17:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |       }
  103 |       const targetAttribute = 'matches';
> 104 |       console.log('page:', page);
      |       ^
  105 |       const startRow = (page - 1) * this.matchesPerPage;
  106 |       const rowLimit = startRow + this.matchesPerPage;
  107 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:116:7:
  114 |         chunkSize,
  115 |       };
> 116 |       console.log(loadParams);
      |       ^
  117 |       database.loadByQueryIteratively(loadParams).then(() => {
  118 |         this.loading = false;
  119 |       });


10 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:41 AM

 WARNING  Compiled with 1 warnings9:41:42 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_training_matches_view/?pattern_id=${this.patternId}'
     |             ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Unexpected template string expression (no-template-curly-in-string) at src/views/MatchesView.vue:94:21:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_training_matches_view/?pattern_id=${this.patternId}'
     |                     ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = 'pattern_training_matches_view/?pattern_id=${this.patternId}'
     |                                                                                  ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:97:7:
   95 |     },
   96 |     loadMatches(page) {
>  97 |       console.log(page);
      |       ^
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:100:12:
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
> 100 |       if (!isNaN(this.patternId)) {
      |            ^
  101 |         query = query + `/?pattern_id=${this.patternId}`;
  102 |       }
  103 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:101:9:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:101:17:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |       }
  103 |       const targetAttribute = 'matches';
> 104 |       console.log('page:', page);
      |       ^
  105 |       const startRow = (page - 1) * this.matchesPerPage;
  106 |       const rowLimit = startRow + this.matchesPerPage;
  107 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:116:7:
  114 |         chunkSize,
  115 |       };
> 116 |       console.log(loadParams);
      |       ^
  117 |       database.loadByQueryIteratively(loadParams).then(() => {
  118 |         this.loading = false;
  119 |       });


11 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:47 AM

 WARNING  Compiled with 1 warnings9:41:48 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:97:7:
   95 |     },
   96 |     loadMatches(page) {
>  97 |       console.log(page);
      |       ^
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:100:12:
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
> 100 |       if (!isNaN(this.patternId)) {
      |            ^
  101 |         query = query + `/?pattern_id=${this.patternId}`;
  102 |       }
  103 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:101:9:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:101:17:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |       }
  103 |       const targetAttribute = 'matches';
> 104 |       console.log('page:', page);
      |       ^
  105 |       const startRow = (page - 1) * this.matchesPerPage;
  106 |       const rowLimit = startRow + this.matchesPerPage;
  107 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:116:7:
  114 |         chunkSize,
  115 |       };
> 116 |       console.log(loadParams);
      |       ^
  117 |       database.loadByQueryIteratively(loadParams).then(() => {
  118 |         this.loading = false;
  119 |       });


10 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:49 AM

 WARNING  Compiled with 1 warnings9:41:50 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |     },
  96 |     loadMatches(page) {
  97 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:97:7:
   95 |     },
   96 |     loadMatches(page) {
>  97 |       console.log(page);
      |       ^
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:100:12:
   98 |       this.loading = true;
   99 |       let query = 'pattern_matches_view';
> 100 |       if (!isNaN(this.patternId)) {
      |            ^
  101 |         query = query + `/?pattern_id=${this.patternId}`;
  102 |       }
  103 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:101:9:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:101:17:
   99 |       let query = 'pattern_matches_view';
  100 |       if (!isNaN(this.patternId)) {
> 101 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  102 |       }
  103 |       const targetAttribute = 'matches';
  104 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |       }
  103 |       const targetAttribute = 'matches';
> 104 |       console.log('page:', page);
      |       ^
  105 |       const startRow = (page - 1) * this.matchesPerPage;
  106 |       const rowLimit = startRow + this.matchesPerPage;
  107 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:116:7:
  114 |         chunkSize,
  115 |       };
> 116 |       console.log(loadParams);
      |       ^
  117 |       database.loadByQueryIteratively(loadParams).then(() => {
  118 |         this.loading = false;
  119 |       });


10 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:50 AM

 WARNING  Compiled with 1 warnings9:41:50 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/views/MatchesView.vue:95:1:
  93 |     loadTrainingMatch() {
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
> 95 |       
     | ^
  96 |     },
  97 |     loadMatches(page) {
  98 |       console.log(page);


error: Block must not be padded by blank lines (padded-blocks) at src/views/MatchesView.vue:96:5:
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
  95 |       
> 96 |     },
     |     ^
  97 |     loadMatches(page) {
  98 |       console.log(page);
  99 |       this.loading = true;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:98:7:
   96 |     },
   97 |     loadMatches(page) {
>  98 |       console.log(page);
      |       ^
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:101:12:
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
> 101 |       if (!isNaN(this.patternId)) {
      |            ^
  102 |         query = query + `/?pattern_id=${this.patternId}`;
  103 |       }
  104 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:102:9:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:102:17:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:105:7:
  103 |       }
  104 |       const targetAttribute = 'matches';
> 105 |       console.log('page:', page);
      |       ^
  106 |       const startRow = (page - 1) * this.matchesPerPage;
  107 |       const rowLimit = startRow + this.matchesPerPage;
  108 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:117:7:
  115 |         chunkSize,
  116 |       };
> 117 |       console.log(loadParams);
      |       ^
  118 |       database.loadByQueryIteratively(loadParams).then(() => {
  119 |         this.loading = false;
  120 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:50 AM

 WARNING  Compiled with 1 warnings9:41:51 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/views/MatchesView.vue:95:1:
  93 |     loadTrainingMatch() {
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
> 95 |       
     | ^
  96 |     },
  97 |     loadMatches(page) {
  98 |       console.log(page);


error: Block must not be padded by blank lines (padded-blocks) at src/views/MatchesView.vue:96:5:
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
  95 |       
> 96 |     },
     |     ^
  97 |     loadMatches(page) {
  98 |       console.log(page);
  99 |       this.loading = true;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:98:7:
   96 |     },
   97 |     loadMatches(page) {
>  98 |       console.log(page);
      |       ^
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:101:12:
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
> 101 |       if (!isNaN(this.patternId)) {
      |            ^
  102 |         query = query + `/?pattern_id=${this.patternId}`;
  103 |       }
  104 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:102:9:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:102:17:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:105:7:
  103 |       }
  104 |       const targetAttribute = 'matches';
> 105 |       console.log('page:', page);
      |       ^
  106 |       const startRow = (page - 1) * this.matchesPerPage;
  107 |       const rowLimit = startRow + this.matchesPerPage;
  108 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:117:7:
  115 |         chunkSize,
  116 |       };
> 117 |       console.log(loadParams);
      |       ^
  118 |       database.loadByQueryIteratively(loadParams).then(() => {
  119 |         this.loading = false;
  120 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:41:53 AM

 WARNING  Compiled with 1 warnings9:41:53 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       
  96 |     },
  97 |     loadMatches(page) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/views/MatchesView.vue:95:1:
  93 |     loadTrainingMatch() {
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
> 95 |       
     | ^
  96 |     },
  97 |     loadMatches(page) {
  98 |       console.log(page);


error: Block must not be padded by blank lines (padded-blocks) at src/views/MatchesView.vue:96:5:
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
  95 |       
> 96 |     },
     |     ^
  97 |     loadMatches(page) {
  98 |       console.log(page);
  99 |       this.loading = true;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:98:7:
   96 |     },
   97 |     loadMatches(page) {
>  98 |       console.log(page);
      |       ^
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:101:12:
   99 |       this.loading = true;
  100 |       let query = 'pattern_matches_view';
> 101 |       if (!isNaN(this.patternId)) {
      |            ^
  102 |         query = query + `/?pattern_id=${this.patternId}`;
  103 |       }
  104 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:102:9:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:102:17:
  100 |       let query = 'pattern_matches_view';
  101 |       if (!isNaN(this.patternId)) {
> 102 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  103 |       }
  104 |       const targetAttribute = 'matches';
  105 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:105:7:
  103 |       }
  104 |       const targetAttribute = 'matches';
> 105 |       console.log('page:', page);
      |       ^
  106 |       const startRow = (page - 1) * this.matchesPerPage;
  107 |       const rowLimit = startRow + this.matchesPerPage;
  108 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:117:7:
  115 |         chunkSize,
  116 |       };
> 117 |       console.log(loadParams);
      |       ^
  118 |       database.loadByQueryIteratively(loadParams).then(() => {
  119 |         this.loading = false;
  120 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:42:25 AM

 WARNING  Compiled with 1 warnings9:42:25 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'query' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:94:13:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |             ^
  95 |       database.loadByQuery({
  96 |         
  97 |       })


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         
  97 |       })


error: Trailing spaces not allowed (no-trailing-spaces) at src/views/MatchesView.vue:96:1:
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
  95 |       database.loadByQuery({
> 96 |         
     | ^
  97 |       })
  98 |     },
  99 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:97:9:
   95 |       database.loadByQuery({
   96 |         
>  97 |       })
      |         ^
   98 |     },
   99 |     loadMatches(page) {
  100 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:100:7:
   98 |     },
   99 |     loadMatches(page) {
> 100 |       console.log(page);
      |       ^
  101 |       this.loading = true;
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:103:12:
  101 |       this.loading = true;
  102 |       let query = 'pattern_matches_view';
> 103 |       if (!isNaN(this.patternId)) {
      |            ^
  104 |         query = query + `/?pattern_id=${this.patternId}`;
  105 |       }
  106 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:104:9:
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {
> 104 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  105 |       }
  106 |       const targetAttribute = 'matches';
  107 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:104:17:
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {
> 104 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  105 |       }
  106 |       const targetAttribute = 'matches';
  107 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:107:7:
  105 |       }
  106 |       const targetAttribute = 'matches';
> 107 |       console.log('page:', page);
      |       ^
  108 |       const startRow = (page - 1) * this.matchesPerPage;
  109 |       const rowLimit = startRow + this.matchesPerPage;
  110 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:119:7:
  117 |         chunkSize,
  118 |       };
> 119 |       console.log(loadParams);
      |       ^
  120 |       database.loadByQueryIteratively(loadParams).then(() => {
  121 |         this.loading = false;
  122 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:42:46 AM

 WARNING  Compiled with 1 warnings9:42:47 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:42:47 AM

 WARNING  Compiled with 1 warnings9:42:47 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:42:47 AM

 WARNING  Compiled with 1 warnings9:42:48 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:42:51 AM

 WARNING  Compiled with 1 warnings9:42:51 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:43:07 AM

 WARNING  Compiled with 1 warnings9:43:07 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.loadByQuery({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:44:38 AM

 WARNING  Compiled with 1 warnings9:44:39 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.get({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:44:39 AM

 WARNING  Compiled with 1 warnings9:44:39 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.get({
  96 |         query,
  97 |         targetObj: this,


error: Missing trailing comma (comma-dangle) at src/views/MatchesView.vue:98:35:
   96 |         query,
   97 |         targetObj: this,
>  98 |         targetAttribute: 'matches'
      |                                   ^
   99 |       })
  100 |     },
  101 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:9:
   97 |         targetObj: this,
   98 |         targetAttribute: 'matches'
>  99 |       })
      |         ^
  100 |     },
  101 |     loadMatches(page) {
  102 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:00 AM

 WARNING  Compiled with 1 warnings9:45:01 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/views/MatchesView.vue:74:19:
  72 |   mounted() {
  73 |     this.loadMatchesCount();
> 74 |     const page = 1
     |                   ^
  75 |     this.loadMatches(page);
  76 |     if (!isNaN(this.patternId)) {
  77 |       this.loadTrainingMatch();


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Missing semicolon (semi) at src/views/MatchesView.vue:94:82:
  92 |     },
  93 |     loadTrainingMatch() {
> 94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
     |                                                                                  ^
  95 |       database.get(query)
  96 |         .then((items) => {
  97 | 


error: 'items' is defined but never used (no-unused-vars) at src/views/MatchesView.vue:96:16:
  94 |       const query = `pattern_training_matches_view/?pattern_id=${this.patternId}`
  95 |       database.get(query)
> 96 |         .then((items) => {
     |                ^
  97 | 
  98 |         })
  99 |     },


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:11:
   96 |         .then((items) => {
   97 | 
>  98 |         })
      |           ^
   99 |     },
  100 |     loadMatches(page) {
  101 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:101:7:
   99 |     },
  100 |     loadMatches(page) {
> 101 |       console.log(page);
      |       ^
  102 |       this.loading = true;
  103 |       let query = 'pattern_matches_view';
  104 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:104:12:
  102 |       this.loading = true;
  103 |       let query = 'pattern_matches_view';
> 104 |       if (!isNaN(this.patternId)) {
      |            ^
  105 |         query = query + `/?pattern_id=${this.patternId}`;
  106 |       }
  107 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:105:9:
  103 |       let query = 'pattern_matches_view';
  104 |       if (!isNaN(this.patternId)) {
> 105 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  106 |       }
  107 |       const targetAttribute = 'matches';
  108 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:105:17:
  103 |       let query = 'pattern_matches_view';
  104 |       if (!isNaN(this.patternId)) {
> 105 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  106 |       }
  107 |       const targetAttribute = 'matches';
  108 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:108:7:
  106 |       }
  107 |       const targetAttribute = 'matches';
> 108 |       console.log('page:', page);
      |       ^
  109 |       const startRow = (page - 1) * this.matchesPerPage;
  110 |       const rowLimit = startRow + this.matchesPerPage;
  111 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:120:7:
  118 |         chunkSize,
  119 |       };
> 120 |       console.log(loadParams);
      |       ^
  121 |       database.loadByQueryIteratively(loadParams).then(() => {
  122 |         this.loading = false;
  123 |       });


11 errors and 3 warnings found.
7 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:12 AM

 WARNING  Compiled with 1 warnings9:45:13 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'items' is defined but never used (no-unused-vars) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {});
      |                                ^
   98 |     },
   99 |     loadMatches(page) {
  100 |       console.log(page);


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {});
      |                                ^
   98 |     },
   99 |     loadMatches(page) {
  100 |       console.log(page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:100:7:
   98 |     },
   99 |     loadMatches(page) {
> 100 |       console.log(page);
      |       ^
  101 |       this.loading = true;
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:103:12:
  101 |       this.loading = true;
  102 |       let query = 'pattern_matches_view';
> 103 |       if (!isNaN(this.patternId)) {
      |            ^
  104 |         query = query + `/?pattern_id=${this.patternId}`;
  105 |       }
  106 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:104:9:
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {
> 104 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  105 |       }
  106 |       const targetAttribute = 'matches';
  107 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:104:17:
  102 |       let query = 'pattern_matches_view';
  103 |       if (!isNaN(this.patternId)) {
> 104 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  105 |       }
  106 |       const targetAttribute = 'matches';
  107 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:107:7:
  105 |       }
  106 |       const targetAttribute = 'matches';
> 107 |       console.log('page:', page);
      |       ^
  108 |       const startRow = (page - 1) * this.matchesPerPage;
  109 |       const rowLimit = startRow + this.matchesPerPage;
  110 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:119:7:
  117 |         chunkSize,
  118 |       };
> 119 |       console.log(loadParams);
      |       ^
  120 |       database.loadByQueryIteratively(loadParams).then(() => {
  121 |         this.loading = false;
  122 |       });


9 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:13 AM

 WARNING  Compiled with 1 warnings9:45:14 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: 'items' is defined but never used (no-unused-vars) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         
   99 |       });
  100 |     },


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         
   99 |       });
  100 |     },


error: Trailing spaces not allowed (no-trailing-spaces) at src/views/MatchesView.vue:98:1:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         
      | ^
   99 |       });
  100 |     },
  101 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:102:7:
  100 |     },
  101 |     loadMatches(page) {
> 102 |       console.log(page);
      |       ^
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:105:12:
  103 |       this.loading = true;
  104 |       let query = 'pattern_matches_view';
> 105 |       if (!isNaN(this.patternId)) {
      |            ^
  106 |         query = query + `/?pattern_id=${this.patternId}`;
  107 |       }
  108 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:106:9:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:106:17:
  104 |       let query = 'pattern_matches_view';
  105 |       if (!isNaN(this.patternId)) {
> 106 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  107 |       }
  108 |       const targetAttribute = 'matches';
  109 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:109:7:
  107 |       }
  108 |       const targetAttribute = 'matches';
> 109 |       console.log('page:', page);
      |       ^
  110 |       const startRow = (page - 1) * this.matchesPerPage;
  111 |       const rowLimit = startRow + this.matchesPerPage;
  112 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:121:7:
  119 |         chunkSize,
  120 |       };
> 121 |       console.log(loadParams);
      |       ^
  122 |       database.loadByQueryIteratively(loadParams).then(() => {
  123 |         this.loading = false;
  124 |       });


10 errors and 3 warnings found.
6 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:29 AM

 WARNING  Compiled with 1 warnings9:45:30 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         this.matches
  100 |       });


error: 'item' is assigned a value but never used (no-unused-vars) at src/views/MatchesView.vue:98:15:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |               ^
   99 |         this.matches
  100 |       });
  101 |     },


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         this.matches
  100 |       });
  101 |     },


error: Expected an assignment or function call and instead saw an expression (no-unused-expressions) at src/views/MatchesView.vue:99:9:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         this.matches
      |         ^
  100 |       });
  101 |     },
  102 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:21:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         this.matches
      |                     ^
  100 |       });
  101 |     },
  102 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:103:7:
  101 |     },
  102 |     loadMatches(page) {
> 103 |       console.log(page);
      |       ^
  104 |       this.loading = true;
  105 |       let query = 'pattern_matches_view';
  106 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:106:12:
  104 |       this.loading = true;
  105 |       let query = 'pattern_matches_view';
> 106 |       if (!isNaN(this.patternId)) {
      |            ^
  107 |         query = query + `/?pattern_id=${this.patternId}`;
  108 |       }
  109 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:107:9:
  105 |       let query = 'pattern_matches_view';
  106 |       if (!isNaN(this.patternId)) {
> 107 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  108 |       }
  109 |       const targetAttribute = 'matches';
  110 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:107:17:
  105 |       let query = 'pattern_matches_view';
  106 |       if (!isNaN(this.patternId)) {
> 107 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  108 |       }
  109 |       const targetAttribute = 'matches';
  110 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:110:7:
  108 |       }
  109 |       const targetAttribute = 'matches';
> 110 |       console.log('page:', page);
      |       ^
  111 |       const startRow = (page - 1) * this.matchesPerPage;
  112 |       const rowLimit = startRow + this.matchesPerPage;
  113 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:122:7:
  120 |         chunkSize,
  121 |       };
> 122 |       console.log(loadParams);
      |       ^
  123 |       database.loadByQueryIteratively(loadParams).then(() => {
  124 |         this.loading = false;
  125 |       });


12 errors and 3 warnings found.
7 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:45 AM

 WARNING  Compiled with 1 warnings9:45:46 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches
  101 |       });
  102 |     },


error: Expected an assignment or function call and instead saw an expression (no-unused-expressions) at src/views/MatchesView.vue:100:9:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |         ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:21:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |                     ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:46 AM

 WARNING  Compiled with 1 warnings9:45:47 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches
  101 |       });
  102 |     },


error: Expected an assignment or function call and instead saw an expression (no-unused-expressions) at src/views/MatchesView.vue:100:9:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |         ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:21:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |                     ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:47 AM

 WARNING  Compiled with 1 warnings9:45:47 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches
  101 |       });
  102 |     },


error: Expected an assignment or function call and instead saw an expression (no-unused-expressions) at src/views/MatchesView.vue:100:9:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |         ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:21:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches
      |                     ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


12 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:50 AM

 WARNING  Compiled with 1 warnings9:45:51 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches.push(item)
  101 |       });
  102 |     },


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:32:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches.push(item)
      |                                ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:51 AM

 WARNING  Compiled with 1 warnings9:45:51 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches.push(item)
  101 |       });
  102 |     },


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:32:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches.push(item)
      |                                ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:55 AM

 WARNING  Compiled with 1 warnings9:45:55 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)


error: Missing semicolon (semi) at src/views/MatchesView.vue:98:30:
   96 |       }`;
   97 |       database.get(query).then(items => {
>  98 |         const item = items[0]
      |                              ^
   99 |         item.isTrainingMatch = true
  100 |         this.matches.push(item)
  101 |       });


error: Missing semicolon (semi) at src/views/MatchesView.vue:99:36:
   97 |       database.get(query).then(items => {
   98 |         const item = items[0]
>  99 |         item.isTrainingMatch = true
      |                                    ^
  100 |         this.matches.push(item)
  101 |       });
  102 |     },


error: Missing semicolon (semi) at src/views/MatchesView.vue:100:32:
   98 |         const item = items[0]
   99 |         item.isTrainingMatch = true
> 100 |         this.matches.push(item)
      |                                ^
  101 |       });
  102 |     },
  103 |     loadMatches(page) {


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


11 errors and 3 warnings found.
8 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:45:57 AM

 WARNING  Compiled with 1 warnings9:45:58 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.push(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:50:51 AM

 WARNING  Compiled with 2 warnings9:50:52 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         console.log(response)


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         console.log(response)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         console.log(response)
  82 |         let items = response.data
  83 |         items = this.itemsHandler(items)


warning: Unexpected console statement (no-console) at src/database/database.js:81:9:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         console.log(response)
     |         ^
  82 |         let items = response.data
  83 |         items = this.itemsHandler(items)
  84 |         // console.log(items)


error: Missing semicolon (semi) at src/database/database.js:81:30:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         console.log(response)
     |                              ^
  82 |         let items = response.data
  83 |         items = this.itemsHandler(items)
  84 |         // console.log(items)


error: Missing semicolon (semi) at src/database/database.js:82:34:
  80 |       .then(response => {
  81 |         console.log(response)
> 82 |         let items = response.data
     |                                  ^
  83 |         items = this.itemsHandler(items)
  84 |         // console.log(items)
  85 |         return items


error: Missing semicolon (semi) at src/database/database.js:83:41:
  81 |         console.log(response)
  82 |         let items = response.data
> 83 |         items = this.itemsHandler(items)
     |                                         ^
  84 |         // console.log(items)
  85 |         return items
  86 |       })


error: Missing semicolon (semi) at src/database/database.js:85:21:
  83 |         items = this.itemsHandler(items)
  84 |         // console.log(items)
> 85 |         return items
     |                     ^
  86 |       })
  87 |       .catch(e => {
  88 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:87:14:
  85 |         return items
  86 |       })
> 87 |       .catch(e => {
     |              ^
  88 |         console.log(e)
  89 |       })
  90 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:88:9:
  86 |       })
  87 |       .catch(e => {
> 88 |         console.log(e)
     |         ^
  89 |       })
  90 |   }
  91 | 


error: Missing semicolon (semi) at src/database/database.js:88:23:
  86 |       })
  87 |       .catch(e => {
> 88 |         console.log(e)
     |                       ^
  89 |       })
  90 |   }
  91 | 


error: Missing semicolon (semi) at src/database/database.js:89:9:
  87 |       .catch(e => {
  88 |         console.log(e)
> 89 |       })
     |         ^
  90 |   }
  91 | 
  92 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:93:48:
  91 | 
  92 |   delete(queryString) {
> 93 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  94 |     return axios.delete(queryUrl)
  95 |       .catch(e => {
  96 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:95:14:
  93 |     const queryUrl = this.queryUrl(queryString)
  94 |     return axios.delete(queryUrl)
> 95 |       .catch(e => {
     |              ^
  96 |         throw e
  97 |       })
  98 |   }


error: Missing semicolon (semi) at src/database/database.js:96:16:
  94 |     return axios.delete(queryUrl)
  95 |       .catch(e => {
> 96 |         throw e
     |                ^
  97 |       })
  98 |   }
  99 | 


error: Missing semicolon (semi) at src/database/database.js:97:9:
   95 |       .catch(e => {
   96 |         throw e
>  97 |       })
      |         ^
   98 |   }
   99 | 
  100 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:101:48:
   99 | 
  100 |   post(queryString, payload) {
> 101 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  102 |     return axios.post(queryUrl, payload)
  103 |       .then(response => {
  104 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:103:13:
  101 |     const queryUrl = this.queryUrl(queryString)
  102 |     return axios.post(queryUrl, payload)
> 103 |       .then(response => {
      |             ^
  104 |         let data = response.data
  105 |         data = this.parseJsonFields(data)
  106 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:104:13:
  102 |     return axios.post(queryUrl, payload)
  103 |       .then(response => {
> 104 |         let data = response.data
      |             ^
  105 |         data = this.parseJsonFields(data)
  106 |         return data
  107 |       })


error: Missing semicolon (semi) at src/database/database.js:104:33:
  102 |     return axios.post(queryUrl, payload)
  103 |       .then(response => {
> 104 |         let data = response.data
      |                                 ^
  105 |         data = this.parseJsonFields(data)
  106 |         return data
  107 |       })


error: Missing semicolon (semi) at src/database/database.js:105:42:
  103 |       .then(response => {
  104 |         let data = response.data
> 105 |         data = this.parseJsonFields(data)
      |                                          ^
  106 |         return data
  107 |       })
  108 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:106:20:
  104 |         let data = response.data
  105 |         data = this.parseJsonFields(data)
> 106 |         return data
      |                    ^
  107 |       })
  108 |       .catch(e => {
  109 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:108:14:
  106 |         return data
  107 |       })
> 108 |       .catch(e => {
      |              ^
  109 |         throw e
  110 |       })
  111 |   }


error: Missing semicolon (semi) at src/database/database.js:109:16:
  107 |       })
  108 |       .catch(e => {
> 109 |         throw e
      |                ^
  110 |       })
  111 |   }
  112 | 


error: Missing semicolon (semi) at src/database/database.js:110:9:
  108 |       .catch(e => {
  109 |         throw e
> 110 |       })
      |         ^
  111 |   }
  112 | 
  113 |   update(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:114:48:
  112 | 
  113 |   update(queryString, payload) {
> 114 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  115 |     return axios.update(queryUrl, payload)
  116 |       .then(response => {
  117 |         const data = JSON.parse(response.data)


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:114:48:
  112 | 
  113 |   update(queryString, payload) {
> 114 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  115 |     return axios.update(queryUrl, payload)
  116 |       .then(response => {
  117 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:116:13:
  114 |     const queryUrl = this.queryUrl(queryString)  
  115 |     return axios.update(queryUrl, payload)
> 116 |       .then(response => {
      |             ^
  117 |         const data = JSON.parse(response.data)
  118 |         return data
  119 |       })


error: Missing semicolon (semi) at src/database/database.js:117:47:
  115 |     return axios.update(queryUrl, payload)
  116 |       .then(response => {
> 117 |         const data = JSON.parse(response.data)
      |                                               ^
  118 |         return data
  119 |       })
  120 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:118:20:
  116 |       .then(response => {
  117 |         const data = JSON.parse(response.data)
> 118 |         return data
      |                    ^
  119 |       })
  120 |       .catch(e => {
  121 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:120:14:
  118 |         return data
  119 |       })
> 120 |       .catch(e => {
      |              ^
  121 |         throw e
  122 |       })
  123 |   }


error: Missing semicolon (semi) at src/database/database.js:121:16:
  119 |       })
  120 |       .catch(e => {
> 121 |         throw e
      |                ^
  122 |       })
  123 |   }
  124 | }


error: Missing semicolon (semi) at src/database/database.js:122:9:
  120 |       .catch(e => {
  121 |         throw e
> 122 |       })
      |         ^
  123 |   }
  124 | }
  125 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:126:25:
  124 | }
  125 | 
> 126 | export default Database;
      |                         ^


78 errors and 3 warnings found.
72 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.push(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:05 AM

 WARNING  Compiled with 2 warnings9:52:06 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         // console.log(items)


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         // console.log(items)
  84 |         return items


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         // console.log(items)
  84 |         return items
  85 |       })


error: Missing semicolon (semi) at src/database/database.js:84:21:
  82 |         items = this.itemsHandler(items)
  83 |         // console.log(items)
> 84 |         return items
     |                     ^
  85 |       })
  86 |       .catch(e => {
  87 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:86:14:
  84 |         return items
  85 |       })
> 86 |       .catch(e => {
     |              ^
  87 |         console.log(e)
  88 |       })
  89 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:87:9:
  85 |       })
  86 |       .catch(e => {
> 87 |         console.log(e)
     |         ^
  88 |       })
  89 |   }
  90 | 


error: Missing semicolon (semi) at src/database/database.js:87:23:
  85 |       })
  86 |       .catch(e => {
> 87 |         console.log(e)
     |                       ^
  88 |       })
  89 |   }
  90 | 


error: Missing semicolon (semi) at src/database/database.js:88:9:
  86 |       .catch(e => {
  87 |         console.log(e)
> 88 |       })
     |         ^
  89 |   }
  90 | 
  91 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:92:48:
  90 | 
  91 |   delete(queryString) {
> 92 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  93 |     return axios.delete(queryUrl)
  94 |       .catch(e => {
  95 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:94:14:
  92 |     const queryUrl = this.queryUrl(queryString)
  93 |     return axios.delete(queryUrl)
> 94 |       .catch(e => {
     |              ^
  95 |         throw e
  96 |       })
  97 |   }


error: Missing semicolon (semi) at src/database/database.js:95:16:
  93 |     return axios.delete(queryUrl)
  94 |       .catch(e => {
> 95 |         throw e
     |                ^
  96 |       })
  97 |   }
  98 | 


error: Missing semicolon (semi) at src/database/database.js:96:9:
  94 |       .catch(e => {
  95 |         throw e
> 96 |       })
     |         ^
  97 |   }
  98 | 
  99 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:100:48:
   98 | 
   99 |   post(queryString, payload) {
> 100 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  101 |     return axios.post(queryUrl, payload)
  102 |       .then(response => {
  103 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:102:13:
  100 |     const queryUrl = this.queryUrl(queryString)
  101 |     return axios.post(queryUrl, payload)
> 102 |       .then(response => {
      |             ^
  103 |         let data = response.data
  104 |         data = this.parseJsonFields(data)
  105 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:103:13:
  101 |     return axios.post(queryUrl, payload)
  102 |       .then(response => {
> 103 |         let data = response.data
      |             ^
  104 |         data = this.parseJsonFields(data)
  105 |         return data
  106 |       })


error: Missing semicolon (semi) at src/database/database.js:103:33:
  101 |     return axios.post(queryUrl, payload)
  102 |       .then(response => {
> 103 |         let data = response.data
      |                                 ^
  104 |         data = this.parseJsonFields(data)
  105 |         return data
  106 |       })


error: Missing semicolon (semi) at src/database/database.js:104:42:
  102 |       .then(response => {
  103 |         let data = response.data
> 104 |         data = this.parseJsonFields(data)
      |                                          ^
  105 |         return data
  106 |       })
  107 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:105:20:
  103 |         let data = response.data
  104 |         data = this.parseJsonFields(data)
> 105 |         return data
      |                    ^
  106 |       })
  107 |       .catch(e => {
  108 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:107:14:
  105 |         return data
  106 |       })
> 107 |       .catch(e => {
      |              ^
  108 |         throw e
  109 |       })
  110 |   }


error: Missing semicolon (semi) at src/database/database.js:108:16:
  106 |       })
  107 |       .catch(e => {
> 108 |         throw e
      |                ^
  109 |       })
  110 |   }
  111 | 


error: Missing semicolon (semi) at src/database/database.js:109:9:
  107 |       .catch(e => {
  108 |         throw e
> 109 |       })
      |         ^
  110 |   }
  111 | 
  112 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:113:48:
  111 | 
  112 |   update(queryString, payload) {
> 113 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  114 |     return axios.update(queryUrl, payload)
  115 |       .then(response => {
  116 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:113:48:
  111 | 
  112 |   update(queryString, payload) {
> 113 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  114 |     return axios.update(queryUrl, payload)
  115 |       .then(response => {
  116 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:115:13:
  113 |     const queryUrl = this.queryUrl(queryString)  
  114 |     return axios.update(queryUrl, payload)
> 115 |       .then(response => {
      |             ^
  116 |         const data = JSON.parse(response.data)
  117 |         return data
  118 |       })


error: Missing semicolon (semi) at src/database/database.js:116:47:
  114 |     return axios.update(queryUrl, payload)
  115 |       .then(response => {
> 116 |         const data = JSON.parse(response.data)
      |                                               ^
  117 |         return data
  118 |       })
  119 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:117:20:
  115 |       .then(response => {
  116 |         const data = JSON.parse(response.data)
> 117 |         return data
      |                    ^
  118 |       })
  119 |       .catch(e => {
  120 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:119:14:
  117 |         return data
  118 |       })
> 119 |       .catch(e => {
      |              ^
  120 |         throw e
  121 |       })
  122 |   }


error: Missing semicolon (semi) at src/database/database.js:120:16:
  118 |       })
  119 |       .catch(e => {
> 120 |         throw e
      |                ^
  121 |       })
  122 |   }
  123 | }


error: Missing semicolon (semi) at src/database/database.js:121:9:
  119 |       .catch(e => {
  120 |         throw e
> 121 |       })
      |         ^
  122 |   }
  123 | }
  124 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:125:25:
  123 | }
  124 | 
> 125 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.push(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:07 AM

 WARNING  Compiled with 2 warnings9:52:08 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.push(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:13 AM

 WARNING  Compiled with 2 warnings9:52:14 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:14 AM

 WARNING  Compiled with 2 warnings9:52:14 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:15 AM

 WARNING  Compiled with 2 warnings9:52:15 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:15 AM

 WARNING  Compiled with 2 warnings9:52:16 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:17 AM

 WARNING  Compiled with 2 warnings9:52:17 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:26 AM

 WARNING  Compiled with 2 warnings9:52:26 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:52:35 AM

 WARNING  Compiled with 3 warnings9:52:35 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:94:8:
  92 | 
  93 | <script>
> 94 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  95 | import util from '../util'
  96 | 
  97 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:94:47:
  92 | 
  93 | <script>
> 94 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  95 | import util from '../util'
  96 | 
  97 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:27:
  93 | <script>
  94 | import AnnotatedText from 'vue-annotated-text'
> 95 | import util from '../util'
     |                           ^
  96 | 
  97 | 
  98 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:132:6:
  130 |         },
  131 |       ],
> 132 |     }
      |      ^
  133 |   },
  134 |   computed: {
  135 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:135:5:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |     ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:135:17:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |                 ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:135:25:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |                         ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:136:39:
  134 |   computed: {
  135 |     slotLabels: function() {
> 136 |       const posMatch = this.matches[0]
      |                                       ^
  137 |       if (posMatch === undefined) {
  138 |         return []
  139 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:138:18:
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
> 138 |         return []
      |                  ^
  139 |       }
  140 |       const slots = posMatch.slots
  141 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:140:13:
  138 |         return []
  139 |       }
> 140 |       const slots = posMatch.slots
      |             ^
  141 |       const slotLabels = Object.keys(slots)
  142 |       return slotLabels
  143 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:140:35:
  138 |         return []
  139 |       }
> 140 |       const slots = posMatch.slots
      |                                   ^
  141 |       const slotLabels = Object.keys(slots)
  142 |       return slotLabels
  143 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:44:
  139 |       }
  140 |       const slots = posMatch.slots
> 141 |       const slotLabels = Object.keys(slots)
      |                                            ^
  142 |       return slotLabels
  143 |     },
  144 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:24:
  140 |       const slots = posMatch.slots
  141 |       const slotLabels = Object.keys(slots)
> 142 |       return slotLabels
      |                        ^
  143 |     },
  144 |     // columns: function() {
  145 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:159:5:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |     ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:159:16:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |                ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:159:24:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |                        ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:160:11:
  158 |     // },
  159 |     tableData: function() {
> 160 |       let matches = this.matches
      |           ^
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:160:33:
  158 |     // },
  159 |     tableData: function() {
> 160 |       let matches = this.matches
      |                                 ^
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:49:
  159 |     tableData: function() {
  160 |       let matches = this.matches
> 161 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches
  164 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:60:
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
> 162 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  163 |       return matches
  164 |     },
  165 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:21:
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
> 163 |       return matches
      |                     ^
  164 |     },
  165 |   },
  166 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:167:19:
  165 |   },
  166 |   methods: {
> 167 |     getAnnotations (match) {
      |                   ^
  168 |       const annotations = util.matchToAnnotations(match)
  169 |       return annotations
  170 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:168:57:
  166 |   methods: {
  167 |     getAnnotations (match) {
> 168 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  169 |       return annotations
  170 |     },
  171 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:25:
  167 |     getAnnotations (match) {
  168 |       const annotations = util.matchToAnnotations(match)
> 169 |       return annotations
      |                         ^
  170 |     },
  171 |     toggle(row) {
  172 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:172:1:
  170 |     },
  171 |     toggle(row) {
> 172 |         this.$refs.table.toggleDetails(row)
      | ^
  173 |     },
  174 |     isvalidated(row) {
  175 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:172:44:
  170 |     },
  171 |     toggle(row) {
> 172 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  173 |     },
  174 |     isvalidated(row) {
  175 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:175:43:
  173 |     },
  174 |     isvalidated(row) {
> 175 |       return row.validationStatus === true
      |                                           ^
  176 |     },
  177 |     getSpanClasses(span) {
  178 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:179:27:
  177 |     getSpanClasses(span) {
  178 |       if (span.annotationIds.length > 0) {
> 179 |         return ['outline']
      |                           ^
  180 |       } else {
  181 |         return []
  182 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:180:14:
  178 |       if (span.annotationIds.length > 0) {
  179 |         return ['outline']
> 180 |       } else {
      |              ^
  181 |         return []
  182 |       }
  183 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:181:18:
  179 |         return ['outline']
  180 |       } else {
> 181 |         return []
      |                  ^
  182 |       }
  183 |     },
  184 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:185:2:
  183 |     },
  184 |   },
> 185 | }
      |  ^
  186 | </script>
  187 | 
  188 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:192:9:
  190 |     outline: 1px solid black;
  191 |   }
> 192 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:53:45 AM

 ERROR  Failed to compile with 1 errors9:53:46 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  The value for a v-bind expression cannot be empty. Found in "v-bind:row-class"

  1  |  
     |  
  2  |    <b-table
     |  ^^^^^^^^^^
  3  |      :data="tableData"
     |  ^^^^^^^^^^^^^^^^^^^^^
  4  |      :loading="loading"
     |  ^^^^^^^^^^^^^^^^^^^^^^
  5  |      :total="total"
     |  ^^^^^^^^^^^^^^^^^^
  6  |      detailed
     |  ^^^^^^^^^^^^
  7  |      detail-key="id"
     |  ^^^^^^^^^^^^^^^^^^^
  8  |      :show-detail-icon="true"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  9  |      paginated
     |  ^^^^^^^^^^^^^
  10 |      backend-pagination
     |  ^^^^^^^^^^^^^^^^^^^^^^
  11 |      :per-page="perPage"
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  12 |      @page-change="onPageChange"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  13 |      :row-class
     |  ^^^^^^^^^^^^^^
  14 |    >
     |  ^^^
  15 |  
     |  
  16 |      <template slot-scope="props">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  17 |  
     |  
  18 |        <b-table-column field="matchContent" label="Match content">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |          {{ props.row.slotContent }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  21 |  
     |  
  22 |        <b-table-column field="document_id" label="Document ID">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  23 |          <router-link :to="`/document/?id=${props.row.document_id}`">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  24 |            {{ props.row.document_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  25 |          </router-link>
     |  ^^^^^^^^^^^^^^^^^^^^^^
  26 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  27 |  
     |  
  28 |        <b-table-column field="sentence_id" label="Sentence ID">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  29 |          {{ props.row.sentence_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  30 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  31 |  
     |  
  32 |        <b-table-column
     |  ^^^^^^^^^^^^^^^^^^^^^
  33 |          field="id"
     |  ^^^^^^^^^^^^^^^^^^
  34 |          label="Match ID"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^
  35 |          v-if="props.row.pattern_id !== undefined"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  36 |        >
     |  ^^^^^^^
  37 |          {{ props.row.id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  38 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  39 |  
     |  
  40 |  
     |  
  41 |        <b-table-column
     |  ^^^^^^^^^^^^^^^^^^^^^
  42 |          field="pattern_id"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  43 |          label="Pattern ID"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  44 |          v-if="props.row.pattern_id !== undefined"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  45 |        >
     |  ^^^^^^^
  46 |          {{ props.row.pattern_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  47 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  48 |  
     |  
  49 |        <b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^
  50 |          <b-tooltip label="Visualise match">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  51 |            <div
     |  ^^^^^^^^^^^^^^
  52 |              @click="openMatchVisModal(props.row.id)"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  53 |              class="row-action"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  54 |            >
     |  ^^^^^^^^^^^
  55 |              <b-icon icon="eye"/>
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  56 |            </div>
     |  ^^^^^^^^^^^^^^^^
  57 |          </b-tooltip>
     |  ^^^^^^^^^^^^^^^^^^^^
  58 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  59 |  
     |  
  60 |  <!--       <b-table-column field="validationStatus" label="validationStatus">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  61 |          <b-select v-model="props.row.validationStatus">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  62 |            <option
     |  ^^^^^^^^^^^^^^^^^
  63 |              v-for="option in validationOptions"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  64 |              :value="option.value"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  65 |              :key="option.value">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  66 |              {{ option.label }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  67 |            </option>
     |  ^^^^^^^^^^^^^^^^^^^
  68 |          </b-select>
     |  ^^^^^^^^^^^^^^^^^^^
  69 |        </b-table-column> -->
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  70 |  
     |  
  71 |      </template>
     |  ^^^^^^^^^^^^^^^
  72 |  
     |  
  73 |      <template slot="detail" slot-scope="props">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  74 |        <div>
     |  ^^^^^^^^^^^
  75 |          <AnnotatedText
     |  ^^^^^^^^^^^^^^^^^^^^^^
  76 |            :text="props.row.sentence_data.text"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  77 |            :annotations="getAnnotations(props.row)"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  78 |            :getSpanClasses="getSpanClasses"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  79 |          />
     |  ^^^^^^^^^^
  80 |        </div>
     |  ^^^^^^^^^^^^
  81 |      </template>
     |  ^^^^^^^^^^^^^^^
  82 |  
     |  
  83 |      <template slot="empty">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  84 |        <section class="section">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  85 |          <div class="content has-text-grey has-text-centered">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  86 |            <p>No matches found.</p>
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  87 |          </div>
     |  ^^^^^^^^^^^^^^
  88 |        </section>
     |  ^^^^^^^^^^^^^^^^
  89 |      </template>
     |  ^^^^^^^^^^^^^^^
  90 |  
     |  
  91 |    </b-table>
     |  ^^^^^^^^^^^^


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:53:52 AM

 ERROR  Failed to compile with 1 errors9:53:52 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token ) in

    (row, index) => {

  Raw expression: :row-class="(row, index) => {"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => {"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:54:06 AM

 WARNING  Compiled with 3 warnings9:54:07 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:193:9:
  191 |     outline: 1px solid black;
  192 |   }
> 193 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:54:14 AM

 ERROR  Failed to compile with 1 errors9:54:14 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch && 

  Raw expression: :row-class="(row, index) => row.isTrainingMatch && "


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch && "
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:01 AM

 ERROR  Failed to compile with 1 errors9:55:01 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? ''

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? ''"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? ''"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:01 AM

 ERROR  Failed to compile with 1 errors9:55:02 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? ''

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? ''"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? ''"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:12 AM

 ERROR  Failed to compile with 1 errors9:55:13 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:13 AM

 ERROR  Failed to compile with 1 errors9:55:14 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:22 AM

 ERROR  Failed to compile with 1 errors9:55:22 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:23 AM

 ERROR  Failed to compile with 1 errors9:55:23 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:28 AM

 ERROR  Failed to compile with 1 errors9:55:29 AM

 error  in ./src/components/MatchTable.vue?vue&type=style&index=0&lang=css&

Syntax Error: SyntaxError

(194:3) Unknown word

  192 | }
  193 | tr.training-match {
> 194 |   background
      |   ^
  195 | }
  196 | 



 @ ./node_modules/vue-style-loader??ref--6-oneOf-1-0!./node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--6-oneOf-1-2!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/MatchTable.vue?vue&type=style&index=0&lang=css& 4:14-379 14:3-18:5 15:22-387
 @ ./src/components/MatchTable.vue?vue&type=style&index=0&lang=css&
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:55:32 AM

 ERROR  Failed to compile with 1 errors9:55:32 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:06 AM

 ERROR  Failed to compile with 1 errors9:56:06 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:20 AM

 ERROR  Failed to compile with 1 errors9:56:21 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:38 AM

 ERROR  Failed to compile with 1 errors9:56:39 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:40 AM

 ERROR  Failed to compile with 1 errors9:56:41 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  text ">" outside root element will be ignored.

  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
  13 |      <!-- :row-class="(row, index) => row.isTrainingMatch ? 'training-match'" -->
     |                                                                                  
  14 |    >
     |  ^^^
  15 |  
     |  
  16 |      <template slot-scope="props">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  17 |  
     |  
  18 |        <b-table-column field="matchContent" label="Match content">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |          {{ props.row.slotContent }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  20 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  21 |  
     |  
  22 |        <b-table-column field="document_id" label="Document ID">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  23 |          <router-link :to="`/document/?id=${props.row.document_id}`">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  24 |            {{ props.row.document_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  25 |          </router-link>
     |  ^^^^^^^^^^^^^^^^^^^^^^
  26 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  27 |  
     |  
  28 |        <b-table-column field="sentence_id" label="Sentence ID">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  29 |          {{ props.row.sentence_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  30 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  31 |  
     |  
  32 |        <b-table-column
     |  ^^^^^^^^^^^^^^^^^^^^^
  33 |          field="id"
     |  ^^^^^^^^^^^^^^^^^^
  34 |          label="Match ID"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^
  35 |          v-if="props.row.pattern_id !== undefined"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  36 |        >
     |  ^^^^^^^
  37 |          {{ props.row.id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  38 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  39 |  
     |  
  40 |  
     |  
  41 |        <b-table-column
     |  ^^^^^^^^^^^^^^^^^^^^^
  42 |          field="pattern_id"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  43 |          label="Pattern ID"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^
  44 |          v-if="props.row.pattern_id !== undefined"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  45 |        >
     |  ^^^^^^^
  46 |          {{ props.row.pattern_id }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  47 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  48 |  
     |  
  49 |        <b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^
  50 |          <b-tooltip label="Visualise match">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  51 |            <div
     |  ^^^^^^^^^^^^^^
  52 |              @click="openMatchVisModal(props.row.id)"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  53 |              class="row-action"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  54 |            >
     |  ^^^^^^^^^^^
  55 |              <b-icon icon="eye"/>
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  56 |            </div>
     |  ^^^^^^^^^^^^^^^^
  57 |          </b-tooltip>
     |  ^^^^^^^^^^^^^^^^^^^^
  58 |        </b-table-column>
     |  ^^^^^^^^^^^^^^^^^^^^^^^
  59 |  
     |  
  60 |  <!--       <b-table-column field="validationStatus" label="validationStatus">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  61 |          <b-select v-model="props.row.validationStatus">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  62 |            <option
     |  ^^^^^^^^^^^^^^^^^
  63 |              v-for="option in validationOptions"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  64 |              :value="option.value"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  65 |              :key="option.value">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  66 |              {{ option.label }}
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  67 |            </option>
     |  ^^^^^^^^^^^^^^^^^^^
  68 |          </b-select>
     |  ^^^^^^^^^^^^^^^^^^^
  69 |        </b-table-column> -->
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  70 |  
     |  
  71 |      </template>
     |  ^^^^^^^^^^^^^^^
  72 |  
     |  
  73 |      <template slot="detail" slot-scope="props">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  74 |        <div>
     |  ^^^^^^^^^^^
  75 |          <AnnotatedText
     |  ^^^^^^^^^^^^^^^^^^^^^^
  76 |            :text="props.row.sentence_data.text"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  77 |            :annotations="getAnnotations(props.row)"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  78 |            :getSpanClasses="getSpanClasses"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  79 |          />
     |  ^^^^^^^^^^
  80 |        </div>
     |  ^^^^^^^^^^^^
  81 |      </template>
     |  ^^^^^^^^^^^^^^^
  82 |  
     |  
  83 |      <template slot="empty">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  84 |        <section class="section">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  85 |          <div class="content has-text-grey has-text-centered">
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  86 |            <p>No matches found.</p>
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  87 |          </div>
     |  ^^^^^^^^^^^^^^
  88 |        </section>
     |  ^^^^^^^^^^^^^^^^
  89 |      </template>
     |  ^^^^^^^^^^^^^^^
  90 |  
     |  
  91 |    </b-table>
     |  ^^^^^^^^^^^^


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:42 AM

 ERROR  Failed to compile with 1 errors9:56:42 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:43 AM

 WARNING  Compiled with 3 warnings9:56:43 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:94:8:
  92 | 
  93 | <script>
> 94 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  95 | import util from '../util'
  96 | 
  97 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:94:47:
  92 | 
  93 | <script>
> 94 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  95 | import util from '../util'
  96 | 
  97 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:27:
  93 | <script>
  94 | import AnnotatedText from 'vue-annotated-text'
> 95 | import util from '../util'
     |                           ^
  96 | 
  97 | 
  98 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:132:6:
  130 |         },
  131 |       ],
> 132 |     }
      |      ^
  133 |   },
  134 |   computed: {
  135 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:135:5:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |     ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:135:17:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |                 ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:135:25:
  133 |   },
  134 |   computed: {
> 135 |     slotLabels: function() {
      |                         ^
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
  138 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:136:39:
  134 |   computed: {
  135 |     slotLabels: function() {
> 136 |       const posMatch = this.matches[0]
      |                                       ^
  137 |       if (posMatch === undefined) {
  138 |         return []
  139 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:138:18:
  136 |       const posMatch = this.matches[0]
  137 |       if (posMatch === undefined) {
> 138 |         return []
      |                  ^
  139 |       }
  140 |       const slots = posMatch.slots
  141 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:140:13:
  138 |         return []
  139 |       }
> 140 |       const slots = posMatch.slots
      |             ^
  141 |       const slotLabels = Object.keys(slots)
  142 |       return slotLabels
  143 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:140:35:
  138 |         return []
  139 |       }
> 140 |       const slots = posMatch.slots
      |                                   ^
  141 |       const slotLabels = Object.keys(slots)
  142 |       return slotLabels
  143 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:44:
  139 |       }
  140 |       const slots = posMatch.slots
> 141 |       const slotLabels = Object.keys(slots)
      |                                            ^
  142 |       return slotLabels
  143 |     },
  144 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:24:
  140 |       const slots = posMatch.slots
  141 |       const slotLabels = Object.keys(slots)
> 142 |       return slotLabels
      |                        ^
  143 |     },
  144 |     // columns: function() {
  145 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:159:5:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |     ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:159:16:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |                ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:159:24:
  157 |     //   return columns
  158 |     // },
> 159 |     tableData: function() {
      |                        ^
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:160:11:
  158 |     // },
  159 |     tableData: function() {
> 160 |       let matches = this.matches
      |           ^
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:160:33:
  158 |     // },
  159 |     tableData: function() {
> 160 |       let matches = this.matches
      |                                 ^
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:49:
  159 |     tableData: function() {
  160 |       let matches = this.matches
> 161 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  162 |       matches = util.addSlotContentRepresentations(matches)
  163 |       return matches
  164 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:60:
  160 |       let matches = this.matches
  161 |       matches = util.textifyMatchTokens(matches)
> 162 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  163 |       return matches
  164 |     },
  165 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:21:
  161 |       matches = util.textifyMatchTokens(matches)
  162 |       matches = util.addSlotContentRepresentations(matches)
> 163 |       return matches
      |                     ^
  164 |     },
  165 |   },
  166 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:167:19:
  165 |   },
  166 |   methods: {
> 167 |     getAnnotations (match) {
      |                   ^
  168 |       const annotations = util.matchToAnnotations(match)
  169 |       return annotations
  170 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:168:57:
  166 |   methods: {
  167 |     getAnnotations (match) {
> 168 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  169 |       return annotations
  170 |     },
  171 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:25:
  167 |     getAnnotations (match) {
  168 |       const annotations = util.matchToAnnotations(match)
> 169 |       return annotations
      |                         ^
  170 |     },
  171 |     toggle(row) {
  172 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:172:1:
  170 |     },
  171 |     toggle(row) {
> 172 |         this.$refs.table.toggleDetails(row)
      | ^
  173 |     },
  174 |     isvalidated(row) {
  175 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:172:44:
  170 |     },
  171 |     toggle(row) {
> 172 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  173 |     },
  174 |     isvalidated(row) {
  175 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:175:43:
  173 |     },
  174 |     isvalidated(row) {
> 175 |       return row.validationStatus === true
      |                                           ^
  176 |     },
  177 |     getSpanClasses(span) {
  178 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:179:27:
  177 |     getSpanClasses(span) {
  178 |       if (span.annotationIds.length > 0) {
> 179 |         return ['outline']
      |                           ^
  180 |       } else {
  181 |         return []
  182 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:180:14:
  178 |       if (span.annotationIds.length > 0) {
  179 |         return ['outline']
> 180 |       } else {
      |              ^
  181 |         return []
  182 |       }
  183 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:181:18:
  179 |         return ['outline']
  180 |       } else {
> 181 |         return []
      |                  ^
  182 |       }
  183 |     },
  184 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:185:2:
  183 |     },
  184 |   },
> 185 | }
      |  ^
  186 | </script>
  187 | 
  188 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:195:9:
  193 |     background: #e6dfcf;
  194 |   }
> 195 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:56:48 AM

 ERROR  Failed to compile with 1 errors9:56:49 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:49 AM

 ERROR  Failed to compile with 1 errors9:56:49 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:50 AM

 ERROR  Failed to compile with 1 errors9:56:50 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:56:54 AM

 WARNING  Compiled with 3 warnings9:56:55 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:57:29 AM

 ERROR  Failed to compile with 1 errors9:57:30 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:57:31 AM

 ERROR  Failed to compile with 1 errors9:57:32 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => row.isTrainingMatch ? 'training-match'

  Raw expression: :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => row.isTrainingMatch ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:57:42 AM

 ERROR  Failed to compile with 1 errors9:57:42 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  avoid using JavaScript keyword as property name: "return"
  Raw expression: :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"

  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:57:42 AM

 ERROR  Failed to compile with 1 errors9:57:43 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  avoid using JavaScript keyword as property name: "return"
  Raw expression: :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"

  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:57:56 AM

 ERROR  Failed to compile with 1 errors9:57:56 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  avoid using JavaScript keyword as property name: "return"
  Raw expression: :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"

  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:58:04 AM

 ERROR  Failed to compile with 1 errors9:58:05 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  avoid using JavaScript keyword as property name: "return"
  Raw expression: :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"

  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => {row.isTrainingMatch ? return 'training-match'}"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...9:58:10 AM

 WARNING  Compiled with 3 warnings9:58:11 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:58:58 AM

 WARNING  Compiled with 3 warnings9:58:59 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:58:59 AM

 WARNING  Compiled with 3 warnings9:59:00 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:59:00 AM

 WARNING  Compiled with 3 warnings9:59:00 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:59:15 AM

 WARNING  Compiled with 3 warnings9:59:16 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


warning: Unexpected console statement (no-console) at src/components/MatchTable.vue:186:7:
  184 |     },
  185 |     isRowTrainingMatch(row) {
> 186 |       console.log(row)
      |       ^
  187 |       return true
  188 |     }
  189 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:23:
  184 |     },
  185 |     isRowTrainingMatch(row) {
> 186 |       console.log(row)
      |                       ^
  187 |       return true
  188 |     }
  189 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:18:
  185 |     isRowTrainingMatch(row) {
  186 |       console.log(row)
> 187 |       return true
      |                  ^
  188 |     }
  189 |   },
  190 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:188:6:
  186 |       console.log(row)
  187 |       return true
> 188 |     }
      |      ^
  189 |   },
  190 | }
  191 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:190:2:
  188 |     }
  189 |   },
> 190 | }
      |  ^
  191 | </script>
  192 | 
  193 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:200:9:
  198 |     background: #e6dfcf;
  199 |   }
> 200 | </style>
      |         ^


33 errors and 3 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...9:59:43 AM

 WARNING  Compiled with 3 warnings9:59:43 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


warning: Unexpected console statement (no-console) at src/components/MatchTable.vue:186:7:
  184 |     },
  185 |     isRowTrainingMatch(row) {
> 186 |       console.log(row)
      |       ^
  187 |       return true
  188 |     }
  189 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:23:
  184 |     },
  185 |     isRowTrainingMatch(row) {
> 186 |       console.log(row)
      |                       ^
  187 |       return true
  188 |     }
  189 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:18:
  185 |     isRowTrainingMatch(row) {
  186 |       console.log(row)
> 187 |       return true
      |                  ^
  188 |     }
  189 |   },
  190 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:188:6:
  186 |       console.log(row)
  187 |       return true
> 188 |     }
      |      ^
  189 |   },
  190 | }
  191 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:190:2:
  188 |     }
  189 |   },
> 190 | }
      |  ^
  191 | </script>
  192 | 
  193 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:200:9:
  198 |     background: #e6dfcf;
  199 |   }
> 200 | </style>
      |         ^


33 errors and 3 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:00:11 AM

 WARNING  Compiled with 3 warnings10:00:12 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       console.log(row)
  190 |       return true


warning: Unexpected console statement (no-console) at src/components/MatchTable.vue:189:7:
  187 |         return true
  188 |       }
> 189 |       console.log(row)
      |       ^
  190 |       return true
  191 |     }
  192 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:23:
  187 |         return true
  188 |       }
> 189 |       console.log(row)
      |                       ^
  190 |       return true
  191 |     }
  192 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:190:18:
  188 |       }
  189 |       console.log(row)
> 190 |       return true
      |                  ^
  191 |     }
  192 |   },
  193 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:191:6:
  189 |       console.log(row)
  190 |       return true
> 191 |     }
      |      ^
  192 |   },
  193 | }
  194 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:193:2:
  191 |     }
  192 |   },
> 193 | }
      |  ^
  194 | </script>
  195 | 
  196 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:203:9:
  201 |     background: #e6dfcf;
  202 |   }
> 203 | </style>
      |         ^


34 errors and 3 warnings found.
33 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:00:15 AM

 WARNING  Compiled with 3 warnings10:00:16 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |       console.log(row)


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |       console.log(row)
  191 |       return true
  192 |     }


warning: Unexpected console statement (no-console) at src/components/MatchTable.vue:190:7:
  188 |       }
  189 |       return false
> 190 |       console.log(row)
      |       ^
  191 |       return true
  192 |     }
  193 |   },


error: Unreachable code (no-unreachable) at src/components/MatchTable.vue:190:7:
  188 |       }
  189 |       return false
> 190 |       console.log(row)
      |       ^
  191 |       return true
  192 |     }
  193 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:190:23:
  188 |       }
  189 |       return false
> 190 |       console.log(row)
      |                       ^
  191 |       return true
  192 |     }
  193 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:191:18:
  189 |       return false
  190 |       console.log(row)
> 191 |       return true
      |                  ^
  192 |     }
  193 |   },
  194 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:192:6:
  190 |       console.log(row)
  191 |       return true
> 192 |     }
      |      ^
  193 |   },
  194 | }
  195 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:194:2:
  192 |     }
  193 |   },
> 194 | }
      |  ^
  195 | </script>
  196 | 
  197 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:204:9:
  202 |     background: #e6dfcf;
  203 |   }
> 204 | </style>
      |         ^


36 errors and 3 warnings found.
34 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:00:17 AM

 WARNING  Compiled with 3 warnings10:00:17 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:00:17 AM

 WARNING  Compiled with 3 warnings10:00:18 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:00:29 AM

 ERROR  Failed to compile with 1 errors10:00:29 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:32 AM

 ERROR  Failed to compile with 1 errors10:00:33 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:38 AM

 ERROR  Failed to compile with 1 errors10:00:38 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:39 AM

 ERROR  Failed to compile with 1 errors10:00:40 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:40 AM

 ERROR  Failed to compile with 1 errors10:00:41 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:41 AM

 ERROR  Failed to compile with 1 errors10:00:42 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:43 AM

 ERROR  Failed to compile with 1 errors10:00:43 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:52 AM

 ERROR  Failed to compile with 1 errors10:00:52 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:53 AM

 ERROR  Failed to compile with 1 errors10:00:54 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:55 AM

 ERROR  Failed to compile with 1 errors10:00:55 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:00:56 AM

 ERROR  Failed to compile with 1 errors10:00:56 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:08 AM

 ERROR  Failed to compile with 1 errors10:01:08 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:08 AM

 ERROR  Failed to compile with 1 errors10:01:09 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:24 AM

 ERROR  Failed to compile with 1 errors10:01:25 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:28 AM

 ERROR  Failed to compile with 1 errors10:01:29 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:30 AM

 ERROR  Failed to compile with 1 errors10:01:31 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:34 AM

 ERROR  Failed to compile with 1 errors10:01:34 AM

 error  in ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e&

Module Error (from ./node_modules/vue-loader/lib/loaders/templateLoader.js):
(Emitted value instead of an instance of Error) 

  Errors compiling template:

  invalid expression: Unexpected token } in

    (row, index) => isRowTrainingMatch(row) === true ? 'training-match'

  Raw expression: :row-class="(row, index) => isRowTrainingMatch(row) === true ? 'training-match'"


  10 |      backend-pagination
  11 |      :per-page="perPage"
  12 |      @page-change="onPageChange"
     |                                  
  13 |      :row-class="(row, index) => isRowTrainingMatch(row) === true ? 'training-match'"
     |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  14 |    >


 @ ./src/components/MatchTable.vue?vue&type=template&id=e01d9a8e& 1:0-384 1:0-384
 @ ./src/components/MatchTable.vue
 @ ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue?vue&type=script&lang=js&
 @ ./src/views/MatchesView.vue
 @ ./src/router.js
 @ ./src/main.js
 @ multi (webpack)-dev-server/client?http://192.168.100.6:8080/sockjs-node (webpack)/hot/dev-server.js ./src/main.js

 WAIT  Compiling...10:01:46 AM

 WARNING  Compiled with 3 warnings10:01:47 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:01:47 AM

 WARNING  Compiled with 3 warnings10:01:48 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:02:04 AM

 WARNING  Compiled with 3 warnings10:02:05 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:02:06 AM

 WARNING  Compiled with 3 warnings10:02:06 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |     isRowTrainingMatch(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:187:20:
  185 |     isRowTrainingMatch(row) {
  186 |       if (row.isTrainingMatch) {
> 187 |         return true
      |                    ^
  188 |       }
  189 |       return false
  190 |     }


error: Missing semicolon (semi) at src/components/MatchTable.vue:189:19:
  187 |         return true
  188 |       }
> 189 |       return false
      |                   ^
  190 |     }
  191 |   },
  192 | }


error: Missing trailing comma (comma-dangle) at src/components/MatchTable.vue:190:6:
  188 |       }
  189 |       return false
> 190 |     }
      |      ^
  191 |   },
  192 | }
  193 | </script>


error: Missing semicolon (semi) at src/components/MatchTable.vue:192:2:
  190 |     }
  191 |   },
> 192 | }
      |  ^
  193 | </script>
  194 | 
  195 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:202:9:
  200 |     background: #e6dfcf;
  201 |   }
> 202 | </style>
      |         ^


33 errors and 2 warnings found.
32 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:02:12 AM

 WARNING  Compiled with 3 warnings10:02:13 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:04:09 AM

 WARNING  Compiled with 3 warnings10:04:10 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:196:9:
  194 |     background: #e6dfcf;
  195 |   }
> 196 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

 WAIT  Compiling...10:06:13 AM

 WARNING  Compiled with 3 warnings10:06:13 AM

Module Warning (from ./node_modules/eslint-loader/index.js):
error: 'AnnotatedText' is defined but never used (no-unused-vars) at src/components/MatchTable.vue:95:8:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |        ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:95:47:
  93 | 
  94 | <script>
> 95 | import AnnotatedText from 'vue-annotated-text'
     |                                               ^
  96 | import util from '../util'
  97 | 
  98 | 


error: Missing semicolon (semi) at src/components/MatchTable.vue:96:27:
  94 | <script>
  95 | import AnnotatedText from 'vue-annotated-text'
> 96 | import util from '../util'
     |                           ^
  97 | 
  98 | 
  99 | export default {


error: Missing semicolon (semi) at src/components/MatchTable.vue:133:6:
  131 |         },
  132 |       ],
> 133 |     }
      |      ^
  134 |   },
  135 |   computed: {
  136 |     slotLabels: function() {


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:136:5:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |     ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


warning: Unexpected unnamed method 'slotLabels' (func-names) at src/components/MatchTable.vue:136:17:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                 ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:136:25:
  134 |   },
  135 |   computed: {
> 136 |     slotLabels: function() {
      |                         ^
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
  139 |         return []


error: Missing semicolon (semi) at src/components/MatchTable.vue:137:39:
  135 |   computed: {
  136 |     slotLabels: function() {
> 137 |       const posMatch = this.matches[0]
      |                                       ^
  138 |       if (posMatch === undefined) {
  139 |         return []
  140 |       }


error: Missing semicolon (semi) at src/components/MatchTable.vue:139:18:
  137 |       const posMatch = this.matches[0]
  138 |       if (posMatch === undefined) {
> 139 |         return []
      |                  ^
  140 |       }
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:141:13:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |             ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:141:35:
  139 |         return []
  140 |       }
> 141 |       const slots = posMatch.slots
      |                                   ^
  142 |       const slotLabels = Object.keys(slots)
  143 |       return slotLabels
  144 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:142:44:
  140 |       }
  141 |       const slots = posMatch.slots
> 142 |       const slotLabels = Object.keys(slots)
      |                                            ^
  143 |       return slotLabels
  144 |     },
  145 |     // columns: function() {


error: Missing semicolon (semi) at src/components/MatchTable.vue:143:24:
  141 |       const slots = posMatch.slots
  142 |       const slotLabels = Object.keys(slots)
> 143 |       return slotLabels
      |                        ^
  144 |     },
  145 |     // columns: function() {
  146 |     //   let columns = [...this.defaultMatchTableColumns]


error: Expected method shorthand (object-shorthand) at src/components/MatchTable.vue:160:5:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |     ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


warning: Unexpected unnamed method 'tableData' (func-names) at src/components/MatchTable.vue:160:16:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Missing space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:160:24:
  158 |     //   return columns
  159 |     // },
> 160 |     tableData: function() {
      |                        ^
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)


error: Use object destructuring (prefer-destructuring) at src/components/MatchTable.vue:161:11:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |           ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:161:33:
  159 |     // },
  160 |     tableData: function() {
> 161 |       let matches = this.matches
      |                                 ^
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches


error: Missing semicolon (semi) at src/components/MatchTable.vue:162:49:
  160 |     tableData: function() {
  161 |       let matches = this.matches
> 162 |       matches = util.textifyMatchTokens(matches)
      |                                                 ^
  163 |       matches = util.addSlotContentRepresentations(matches)
  164 |       return matches
  165 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:163:60:
  161 |       let matches = this.matches
  162 |       matches = util.textifyMatchTokens(matches)
> 163 |       matches = util.addSlotContentRepresentations(matches)
      |                                                            ^
  164 |       return matches
  165 |     },
  166 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:164:21:
  162 |       matches = util.textifyMatchTokens(matches)
  163 |       matches = util.addSlotContentRepresentations(matches)
> 164 |       return matches
      |                     ^
  165 |     },
  166 |   },
  167 |   methods: {


error: Unexpected space before function parentheses (space-before-function-paren) at src/components/MatchTable.vue:168:19:
  166 |   },
  167 |   methods: {
> 168 |     getAnnotations (match) {
      |                   ^
  169 |       const annotations = util.matchToAnnotations(match)
  170 |       return annotations
  171 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:169:57:
  167 |   methods: {
  168 |     getAnnotations (match) {
> 169 |       const annotations = util.matchToAnnotations(match)
      |                                                         ^
  170 |       return annotations
  171 |     },
  172 |     toggle(row) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:170:25:
  168 |     getAnnotations (match) {
  169 |       const annotations = util.matchToAnnotations(match)
> 170 |       return annotations
      |                         ^
  171 |     },
  172 |     toggle(row) {
  173 |         this.$refs.table.toggleDetails(row)


error: Expected indentation of 6 spaces but found 8 (indent) at src/components/MatchTable.vue:173:1:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      | ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:173:44:
  171 |     },
  172 |     toggle(row) {
> 173 |         this.$refs.table.toggleDetails(row)
      |                                            ^
  174 |     },
  175 |     isvalidated(row) {
  176 |       return row.validationStatus === true


error: Missing semicolon (semi) at src/components/MatchTable.vue:176:43:
  174 |     },
  175 |     isvalidated(row) {
> 176 |       return row.validationStatus === true
      |                                           ^
  177 |     },
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {


error: Missing semicolon (semi) at src/components/MatchTable.vue:180:27:
  178 |     getSpanClasses(span) {
  179 |       if (span.annotationIds.length > 0) {
> 180 |         return ['outline']
      |                           ^
  181 |       } else {
  182 |         return []
  183 |       }


error: Unnecessary 'else' after 'return' (no-else-return) at src/components/MatchTable.vue:181:14:
  179 |       if (span.annotationIds.length > 0) {
  180 |         return ['outline']
> 181 |       } else {
      |              ^
  182 |         return []
  183 |       }
  184 |     },


error: Missing semicolon (semi) at src/components/MatchTable.vue:182:18:
  180 |         return ['outline']
  181 |       } else {
> 182 |         return []
      |                  ^
  183 |       }
  184 |     },
  185 |   },


error: Missing semicolon (semi) at src/components/MatchTable.vue:186:2:
  184 |     },
  185 |   },
> 186 | }
      |  ^
  187 | </script>
  188 | 
  189 | <style>


error: Newline required at end of file but not found (eol-last) at src/components/MatchTable.vue:199:9:
  197 |     background: #e6dfcf;
  198 |   }
> 199 | </style>
      |         ^


30 errors and 2 warnings found.
29 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Missing semicolon (semi) at src/database/database.js:5:51:
  3 | import util from '../util';
  4 | 
> 5 | const fieldsToUnpack = config.databaseUnpackFields
    |                                                   ^
  6 | 
  7 | class Database {
  8 |   constructor(env) {


error: Missing semicolon (semi) at src/database/database.js:9:19:
   7 | class Database {
   8 |   constructor(env) {
>  9 |     this.env = env
     |                   ^
  10 |     this.url = null
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []


error: Missing semicolon (semi) at src/database/database.js:10:20:
   8 |   constructor(env) {
   9 |     this.env = env
> 10 |     this.url = null
     |                    ^
  11 |     this.trimmedUrl = null
  12 |     this.jsonFields = []
  13 |   }


error: Missing semicolon (semi) at src/database/database.js:11:27:
   9 |     this.env = env
  10 |     this.url = null
> 11 |     this.trimmedUrl = null
     |                           ^
  12 |     this.jsonFields = []
  13 |   }
  14 | 


error: Missing semicolon (semi) at src/database/database.js:12:25:
  10 |     this.url = null
  11 |     this.trimmedUrl = null
> 12 |     this.jsonFields = []
     |                         ^
  13 |   }
  14 | 
  15 |   addUrl(url) {


error: Missing semicolon (semi) at src/database/database.js:16:19:
  14 | 
  15 |   addUrl(url) {
> 16 |     this.url = url
     |                   ^
  17 |     this.trimmedUrl = this.trimUrl(url)
  18 |   }
  19 | 


error: Missing semicolon (semi) at src/database/database.js:17:40:
  15 |   addUrl(url) {
  16 |     this.url = url
> 17 |     this.trimmedUrl = this.trimUrl(url)
     |                                        ^
  18 |   }
  19 | 
  20 |   addJsonFields(fields) {


error: Missing semicolon (semi) at src/database/database.js:21:29:
  19 | 
  20 |   addJsonFields(fields) {
> 21 |     this.jsonFields = fields
     |                             ^
  22 |   }
  23 | 
  24 |   trimUrl(url) {


error: Expected 'this' to be used by class method 'trimUrl' (class-methods-use-this) at src/database/database.js:24:10:
  22 |   }
  23 | 
> 24 |   trimUrl(url) {
     |          ^
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')


error: Missing semicolon (semi) at src/database/database.js:25:39:
  23 | 
  24 |   trimUrl(url) {
> 25 |     const lastCharIdx = url.length - 1
     |                                       ^
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url


error: Missing semicolon (semi) at src/database/database.js:26:38:
  24 |   trimUrl(url) {
  25 |     const lastCharIdx = url.length - 1
> 26 |     const lastChar = url[lastCharIdx]
     |                                      ^
  27 |     const lastCharIsSlash = (lastChar === '/')
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:27:47:
  25 |     const lastCharIdx = url.length - 1
  26 |     const lastChar = url[lastCharIdx]
> 27 |     const lastCharIsSlash = (lastChar === '/')
     |                                               ^
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)


error: Missing semicolon (semi) at src/database/database.js:28:25:
  26 |     const lastChar = url[lastCharIdx]
  27 |     const lastCharIsSlash = (lastChar === '/')
> 28 |     let trimmedUrl = url
     |                         ^
  29 |     if (lastCharIsSlash) {
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }


error: Missing semicolon (semi) at src/database/database.js:30:52:
  28 |     let trimmedUrl = url
  29 |     if (lastCharIsSlash) {
> 30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
     |                                                    ^
  31 |     }
  32 |     return trimmedUrl
  33 |   }


error: Missing semicolon (semi) at src/database/database.js:32:22:
  30 |       trimmedUrl = trimmedUrl.slice(0, lastCharIdx)
  31 |     }
> 32 |     return trimmedUrl
     |                      ^
  33 |   }
  34 | 
  35 |   trimQuery(query) {


error: Expected 'this' to be used by class method 'trimQuery' (class-methods-use-this) at src/database/database.js:35:12:
  33 |   }
  34 | 
> 35 |   trimQuery(query) {
     |            ^
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')


error: 'firstCharIdx' is assigned a value but never used (no-unused-vars) at src/database/database.js:36:11:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:36:27:
  34 | 
  35 |   trimQuery(query) {
> 36 |     const firstCharIdx = 0
     |                           ^
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query


error: Missing semicolon (semi) at src/database/database.js:37:31:
  35 |   trimQuery(query) {
  36 |     const firstCharIdx = 0
> 37 |     const firstChar = query[0]
     |                               ^
  38 |     const firstCharIsSlash = (firstChar === '/')
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {


error: Missing semicolon (semi) at src/database/database.js:38:49:
  36 |     const firstCharIdx = 0
  37 |     const firstChar = query[0]
> 38 |     const firstCharIsSlash = (firstChar === '/')
     |                                                 ^
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)


error: Missing semicolon (semi) at src/database/database.js:39:29:
  37 |     const firstChar = query[0]
  38 |     const firstCharIsSlash = (firstChar === '/')
> 39 |     let trimmedQuery = query
     |                             ^
  40 |     if (firstCharIsSlash) {
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }


error: Missing semicolon (semi) at src/database/database.js:41:64:
  39 |     let trimmedQuery = query
  40 |     if (firstCharIsSlash) {
> 41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
     |                                                                ^
  42 |     }
  43 |     return trimmedQuery
  44 |   }


error: Missing semicolon (semi) at src/database/database.js:43:24:
  41 |       trimmedQuery = trimmedQuery.slice(1, trimmedQuery.length)
  42 |     }
> 43 |     return trimmedQuery
     |                        ^
  44 |   }
  45 | 
  46 |   queryUrl(query) {


error: Use object destructuring (prefer-destructuring) at src/database/database.js:47:11:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |           ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:47:39:
  45 | 
  46 |   queryUrl(query) {
> 47 |     const trimmedUrl = this.trimmedUrl
     |                                       ^
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl


error: Missing semicolon (semi) at src/database/database.js:48:47:
  46 |   queryUrl(query) {
  47 |     const trimmedUrl = this.trimmedUrl
> 48 |     const trimmedQuery = this.trimQuery(query)
     |                                               ^
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
  50 |     return queryUrl
  51 |   }


error: Missing semicolon (semi) at src/database/database.js:49:53:
  47 |     const trimmedUrl = this.trimmedUrl
  48 |     const trimmedQuery = this.trimQuery(query)
> 49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
     |                                                     ^
  50 |     return queryUrl
  51 |   }
  52 | 


error: Missing semicolon (semi) at src/database/database.js:50:20:
  48 |     const trimmedQuery = this.trimQuery(query)
  49 |     const queryUrl = `${trimmedUrl}/${trimmedQuery}`
> 50 |     return queryUrl
     |                    ^
  51 |   }
  52 | 
  53 |   parseJsonFields(item) {


error: Missing semicolon (semi) at src/database/database.js:54:26:
  52 | 
  53 |   parseJsonFields(item) {
> 54 |     const parsedItem = {}
     |                          ^
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:55:31:
  53 |   parseJsonFields(item) {
  54 |     const parsedItem = {}
> 55 |     Object.keys(item).forEach(key => {
     |                               ^
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
  58 |       let newValue = value


error: Missing semicolon (semi) at src/database/database.js:56:59:
  54 |     const parsedItem = {}
  55 |     Object.keys(item).forEach(key => {
> 56 |       const keyIsJsonField = this.jsonFields.includes(key)
     |                                                           ^
  57 |       const value = item[key]
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {


error: Missing semicolon (semi) at src/database/database.js:57:30:
  55 |     Object.keys(item).forEach(key => {
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
> 57 |       const value = item[key]
     |                              ^
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)


error: Missing semicolon (semi) at src/database/database.js:58:27:
  56 |       const keyIsJsonField = this.jsonFields.includes(key)
  57 |       const value = item[key]
> 58 |       let newValue = value
     |                           ^
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
  61 |         newValue = parsedValue


error: Missing semicolon (semi) at src/database/database.js:60:46:
  58 |       let newValue = value
  59 |       if (keyIsJsonField) {
> 60 |         const parsedValue = JSON.parse(value)
     |                                              ^
  61 |         newValue = parsedValue
  62 |       }
  63 |       parsedItem[key] = newValue


error: Missing semicolon (semi) at src/database/database.js:61:31:
  59 |       if (keyIsJsonField) {
  60 |         const parsedValue = JSON.parse(value)
> 61 |         newValue = parsedValue
     |                               ^
  62 |       }
  63 |       parsedItem[key] = newValue
  64 |     })


error: Missing semicolon (semi) at src/database/database.js:63:33:
  61 |         newValue = parsedValue
  62 |       }
> 63 |       parsedItem[key] = newValue
     |                                 ^
  64 |     })
  65 |     return parsedItem
  66 |   }


error: Missing semicolon (semi) at src/database/database.js:64:7:
  62 |       }
  63 |       parsedItem[key] = newValue
> 64 |     })
     |       ^
  65 |     return parsedItem
  66 |   }
  67 | 


error: Missing semicolon (semi) at src/database/database.js:65:22:
  63 |       parsedItem[key] = newValue
  64 |     })
> 65 |     return parsedItem
     |                      ^
  66 |   }
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:69:5:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |     ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Missing semicolon (semi) at src/database/database.js:69:58:
  67 | 
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
> 69 |     items = items.map(item => this.parseJsonFields(item))
     |                                                          ^
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items


error: Assignment to function parameter 'items' (no-param-reassign) at src/database/database.js:70:5:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:70:53:
  68 |   itemsHandler(items, loadOntoTarget, targetAttribute) {
  69 |     items = items.map(item => this.parseJsonFields(item))
> 70 |     items = util.unpackFields(items, fieldsToUnpack)
     |                                                     ^
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
  72 |     return items
  73 |   }


error: Missing semicolon (semi) at src/database/database.js:71:58:
  69 |     items = items.map(item => this.parseJsonFields(item))
  70 |     items = util.unpackFields(items, fieldsToUnpack)
> 71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
     |                                                          ^
  72 |     return items
  73 |   }
  74 | 


error: Missing semicolon (semi) at src/database/database.js:72:17:
  70 |     items = util.unpackFields(items, fieldsToUnpack)
  71 |     util.loadOnto(items, loadOntoTarget, targetAttribute)
> 72 |     return items
     |                 ^
  73 |   }
  74 | 
  75 |   get(queryString, params) {


error: Assignment to function parameter 'params' (no-param-reassign) at src/database/database.js:76:5:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |     ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:76:48:
  74 | 
  75 |   get(queryString, params) {
> 76 |     params = params !== undefined ? params : {}
     |                                                ^
  77 |     const queryUrl = this.queryUrl(queryString)
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)


error: Missing semicolon (semi) at src/database/database.js:77:48:
  75 |   get(queryString, params) {
  76 |     params = params !== undefined ? params : {}
> 77 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {


warning: Unexpected console statement (no-console) at src/database/database.js:78:5:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |     ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Missing semicolon (semi) at src/database/database.js:78:26:
  76 |     params = params !== undefined ? params : {}
  77 |     const queryUrl = this.queryUrl(queryString)
> 78 |     console.log(queryUrl)
     |                          ^
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
  81 |         let items = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:80:13:
  78 |     console.log(queryUrl)
  79 |     return axios.get(queryUrl, params)
> 80 |       .then(response => {
     |             ^
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
  83 |         return items


error: Missing semicolon (semi) at src/database/database.js:81:34:
  79 |     return axios.get(queryUrl, params)
  80 |       .then(response => {
> 81 |         let items = response.data
     |                                  ^
  82 |         items = this.itemsHandler(items)
  83 |         return items
  84 |       })


error: Missing semicolon (semi) at src/database/database.js:82:41:
  80 |       .then(response => {
  81 |         let items = response.data
> 82 |         items = this.itemsHandler(items)
     |                                         ^
  83 |         return items
  84 |       })
  85 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:83:21:
  81 |         let items = response.data
  82 |         items = this.itemsHandler(items)
> 83 |         return items
     |                     ^
  84 |       })
  85 |       .catch(e => {
  86 |         console.log(e)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:85:14:
  83 |         return items
  84 |       })
> 85 |       .catch(e => {
     |              ^
  86 |         console.log(e)
  87 |       })
  88 |   }


warning: Unexpected console statement (no-console) at src/database/database.js:86:9:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |         ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:86:23:
  84 |       })
  85 |       .catch(e => {
> 86 |         console.log(e)
     |                       ^
  87 |       })
  88 |   }
  89 | 


error: Missing semicolon (semi) at src/database/database.js:87:9:
  85 |       .catch(e => {
  86 |         console.log(e)
> 87 |       })
     |         ^
  88 |   }
  89 | 
  90 |   delete(queryString) {


error: Missing semicolon (semi) at src/database/database.js:91:48:
  89 | 
  90 |   delete(queryString) {
> 91 |     const queryUrl = this.queryUrl(queryString)
     |                                                ^
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
  94 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:93:14:
  91 |     const queryUrl = this.queryUrl(queryString)
  92 |     return axios.delete(queryUrl)
> 93 |       .catch(e => {
     |              ^
  94 |         throw e
  95 |       })
  96 |   }


error: Missing semicolon (semi) at src/database/database.js:94:16:
  92 |     return axios.delete(queryUrl)
  93 |       .catch(e => {
> 94 |         throw e
     |                ^
  95 |       })
  96 |   }
  97 | 


error: Missing semicolon (semi) at src/database/database.js:95:9:
  93 |       .catch(e => {
  94 |         throw e
> 95 |       })
     |         ^
  96 |   }
  97 | 
  98 |   post(queryString, payload) {


error: Missing semicolon (semi) at src/database/database.js:99:48:
   97 | 
   98 |   post(queryString, payload) {
>  99 |     const queryUrl = this.queryUrl(queryString)
      |                                                ^
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
  102 |         let data = response.data


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:101:13:
   99 |     const queryUrl = this.queryUrl(queryString)
  100 |     return axios.post(queryUrl, payload)
> 101 |       .then(response => {
      |             ^
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
  104 |         return data


error: Use object destructuring (prefer-destructuring) at src/database/database.js:102:13:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |             ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:102:33:
  100 |     return axios.post(queryUrl, payload)
  101 |       .then(response => {
> 102 |         let data = response.data
      |                                 ^
  103 |         data = this.parseJsonFields(data)
  104 |         return data
  105 |       })


error: Missing semicolon (semi) at src/database/database.js:103:42:
  101 |       .then(response => {
  102 |         let data = response.data
> 103 |         data = this.parseJsonFields(data)
      |                                          ^
  104 |         return data
  105 |       })
  106 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:104:20:
  102 |         let data = response.data
  103 |         data = this.parseJsonFields(data)
> 104 |         return data
      |                    ^
  105 |       })
  106 |       .catch(e => {
  107 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:106:14:
  104 |         return data
  105 |       })
> 106 |       .catch(e => {
      |              ^
  107 |         throw e
  108 |       })
  109 |   }


error: Missing semicolon (semi) at src/database/database.js:107:16:
  105 |       })
  106 |       .catch(e => {
> 107 |         throw e
      |                ^
  108 |       })
  109 |   }
  110 | 


error: Missing semicolon (semi) at src/database/database.js:108:9:
  106 |       .catch(e => {
  107 |         throw e
> 108 |       })
      |         ^
  109 |   }
  110 | 
  111 |   update(queryString, payload) {


error: Trailing spaces not allowed (no-trailing-spaces) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Missing semicolon (semi) at src/database/database.js:112:48:
  110 | 
  111 |   update(queryString, payload) {
> 112 |     const queryUrl = this.queryUrl(queryString)  
      |                                                ^
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:114:13:
  112 |     const queryUrl = this.queryUrl(queryString)  
  113 |     return axios.update(queryUrl, payload)
> 114 |       .then(response => {
      |             ^
  115 |         const data = JSON.parse(response.data)
  116 |         return data
  117 |       })


error: Missing semicolon (semi) at src/database/database.js:115:47:
  113 |     return axios.update(queryUrl, payload)
  114 |       .then(response => {
> 115 |         const data = JSON.parse(response.data)
      |                                               ^
  116 |         return data
  117 |       })
  118 |       .catch(e => {


error: Missing semicolon (semi) at src/database/database.js:116:20:
  114 |       .then(response => {
  115 |         const data = JSON.parse(response.data)
> 116 |         return data
      |                    ^
  117 |       })
  118 |       .catch(e => {
  119 |         throw e


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/database/database.js:118:14:
  116 |         return data
  117 |       })
> 118 |       .catch(e => {
      |              ^
  119 |         throw e
  120 |       })
  121 |   }


error: Missing semicolon (semi) at src/database/database.js:119:16:
  117 |       })
  118 |       .catch(e => {
> 119 |         throw e
      |                ^
  120 |       })
  121 |   }
  122 | }


error: Missing semicolon (semi) at src/database/database.js:120:9:
  118 |       .catch(e => {
  119 |         throw e
> 120 |       })
      |         ^
  121 |   }
  122 | }
  123 | 


error: Newline required at end of file but not found (eol-last) at src/database/database.js:124:25:
  122 | }
  123 | 
> 124 | export default Database;
      |                         ^


77 errors and 2 warnings found.
71 errors potentially fixable with the `--fix` option.

Module Warning (from ./node_modules/eslint-loader/index.js):
error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:76:10:
  74 |     const page = 1;
  75 |     this.loadMatches(page);
> 76 |     if (!isNaN(this.patternId)) {
     |          ^
  77 |       this.loadTrainingMatch();
  78 |     }
  79 |   },


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:83:12:
  81 |     loadMatchesCount() {
  82 |       let query = 'pattern_matches_count_view';
> 83 |       if (!isNaN(this.patternId)) {
     |            ^
  84 |         query = query + `/?pattern_id=${this.patternId}`;
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:84:9:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |         ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:84:17:
  82 |       let query = 'pattern_matches_count_view';
  83 |       if (!isNaN(this.patternId)) {
> 84 |         query = query + `/?pattern_id=${this.patternId}`;
     |                 ^
  85 |       }
  86 |       const targetAttribute = 'matchesCountResult';
  87 |       database.loadOneByQuery({


error: Expected parentheses around arrow function argument having a body with curly braces (arrow-parens) at src/views/MatchesView.vue:97:32:
   95 |         this.patternId
   96 |       }`;
>  97 |       database.get(query).then(items => {
      |                                ^
   98 |         const item = items[0];
   99 |         item.isTrainingMatch = true;
  100 |         this.matches.unshift(item);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:104:7:
  102 |     },
  103 |     loadMatches(page) {
> 104 |       console.log(page);
      |       ^
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {


error: Unexpected use of 'isNaN' (no-restricted-globals) at src/views/MatchesView.vue:107:12:
  105 |       this.loading = true;
  106 |       let query = 'pattern_matches_view';
> 107 |       if (!isNaN(this.patternId)) {
      |            ^
  108 |         query = query + `/?pattern_id=${this.patternId}`;
  109 |       }
  110 |       const targetAttribute = 'matches';


error: Assignment can be replaced with operator assignment (operator-assignment) at src/views/MatchesView.vue:108:9:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |         ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


error: Unexpected string concatenation (prefer-template) at src/views/MatchesView.vue:108:17:
  106 |       let query = 'pattern_matches_view';
  107 |       if (!isNaN(this.patternId)) {
> 108 |         query = query + `/?pattern_id=${this.patternId}`;
      |                 ^
  109 |       }
  110 |       const targetAttribute = 'matches';
  111 |       console.log('page:', page);


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:111:7:
  109 |       }
  110 |       const targetAttribute = 'matches';
> 111 |       console.log('page:', page);
      |       ^
  112 |       const startRow = (page - 1) * this.matchesPerPage;
  113 |       const rowLimit = startRow + this.matchesPerPage;
  114 |       const chunkSize = 5;


warning: Unexpected console statement (no-console) at src/views/MatchesView.vue:123:7:
  121 |         chunkSize,
  122 |       };
> 123 |       console.log(loadParams);
      |       ^
  124 |       database.loadByQueryIteratively(loadParams).then(() => {
  125 |         this.loading = false;
  126 |       });


8 errors and 3 warnings found.
5 errors potentially fixable with the `--fix` option.

You may use special comments to disable some warnings.
Use // eslint-disable-next-line to ignore the next line.
Use /* eslint-disable */ to ignore all warnings in a file.

  App running at:
  - Local:   http://localhost:8080/ 
  - Network: http://192.168.100.6:8080/

ant_cons_head_valence.db
